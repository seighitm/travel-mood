generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RelationshipStatus {
  id     Int    @id @default(autoincrement())
  status String @unique
  user   User[]
}

model Role {
  id   Int    @id @default(autoincrement())
  role String @unique
  user User[]
}

model Gender {
  id     Int    @id @default(autoincrement())
  gender String @unique
  user   User?  @relation(fields: [userId], references: [id])
  userId Int?   @unique
  trip   Trip?  @relation(fields: [tripId], references: [id])
  tripId Int?   @unique
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
  trip  Trip[]
}

model Transport {
  id    Int    @id @default(autoincrement())
  name  String @unique
  trips Trip[]
}

model Countries {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  code           String    @unique
  trips          Trip[]
  articles       Article[]
  users          User[]
  visitedBy      User[]    @relation("VisitedCountriesByUser")
  interestedInBy User[]    @relation("InteresetCountriesByUser")
}

model Chat {
  id              Int       @id @default(autoincrement())
  chatName        String?
  isGroupChat     Boolean   @default(false)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  users           User[]    @relation("UsersOnChat")
  groupAdmin      User?     @relation("ChatAdmin", fields: [groupAdminId], references: [id])
  groupAdminId    Int?
  latestMessage   Message?  @relation("LatestMessageOfChat", fields: [latestMessageId], references: [id])
  latestMessageId Int?      @unique
  messages        Message[] @relation("ChatMessages")
}

model Message {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  content         String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  chat            Chat?    @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  chatId          Int?
  readBy          User[]   @relation("MessageReadByUsers", references: [id])
  lastChatMessage Chat?    @relation("LatestMessageOfChat")
}

model UserJoinToTrip {
  id      Int     @id @default(autoincrement())
  user    User?   @relation(fields: [userId], references: [id])
  userId  Int?
  trip    Trip?   @relation(fields: [tripId], references: [id])
  tripId  Int?
  comment String?
  status  String  @default("PENDING")

  @@unique([userId, tripId])
}

model ProfileViews {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  guest     User?    @relation("GuestsUser", fields: [guestId], references: [id])
  guestId   Int?
  user      User?    @relation("ProfileView", fields: [userId], references: [id])
  userId    Int?
  seen      Boolean  @default(false)

  @@unique([guestId, userId])
}

model User {
  id                    Int                @id @default(autoincrement())
  email                 String             @unique @db.VarChar(150)
  password              String             @db.VarChar(150)
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  refreshToken          RefreshToken?
  role                  Role               @relation(fields: [roleId], references: [id])
  roleId                Int                @map("user_id")
  firstName             String             @map("first_name")
  lastName              String             @map("last_name")
  picture               UserImage?         @relation("UserProfileImage")
  birthday              DateTime?
  languages             Language[]
  gender                Gender?
  country               Countries?         @relation(fields: [countryId], references: [id])
  countryId             Int?
  relationshipStatus    RelationshipStatus @relation(fields: [relationshipStatusId], references: [id])
  relationshipStatusId  Int                @map("relationshipStatus_id")
  resetPasswordToken    String?            @unique
  resetPasswordExpire   DateTime?          @map("reset_password_expire")
  messages              Message[]
  chats                 Chat[]             @relation("UsersOnChat")
  chatsAdmin            Chat[]             @relation("ChatAdmin")
  followedBy            User[]             @relation("UserFollows", references: [id])
  following             User[]             @relation("UserFollows", references: [id])
  articles              Article[]          @relation("ArticleAuthor")
  favoritedArticle      Article[]          @relation("ArticleFavoriteBy", references: [id])
  articleComments       ArticleComment[]
  trips                 Trip[]
  usersJoinToTrip       UserJoinToTrip[]
  tripComments          TripComment[]
  tripFavoritedBy       Trip[]             @relation("TripFavoritedBy", references: [id])
  guests                ProfileViews[]     @relation("GuestsUser")
  pofilesVisit          ProfileViews[]     @relation("ProfileView")
  visitedCountries      Countries[]        @relation("VisitedCountriesByUser")
  interestedInCountries Countries[]        @relation("InteresetCountriesByUser")
  activatedStatus       String             @default("ACTIVATED") @map("activated_status")
  blockExpiration       DateTime?          @map("block_expiration")
  myRatings             UserRatings[]      @relation("MyRatings")
  providedRatings       UserRatings[]      @relation("ProvidedRatings")
  rating                Float              @default(0)
  images                UserImage[]        @relation("UserImages")
  complaintEmit         Complaint[]        @relation("ComplaintUserEmit")
  complaintReceive      Complaint[]        @relation("ComplaintUserReceive")
  messgaesRead          Message[]          @relation("MessageReadByUsers", references: [id])

  @@unique([firstName, lastName])
}

model TripComment {
  id        Int      @id @default(autoincrement())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Trip      Trip?    @relation(fields: [tripId], references: [id])
  tripId    Int?
  createdAt DateTime @default(now()) @map("created_at")
}

model Trip {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  dateFrom        DateTime?        @map("date_from")
  dateTo          DateTime?        @map("date_to")
  isAnytime       Boolean          @default(false) @map("is_anytime")
  gender          Gender?
  languages       Language[]
  title           String
  description     String
  transports      Transport[]
  budget          String?
  splitCosts      Boolean?         @map("split_costs")
  itinerary       String?
  destinations    Countries[]
  places          Marker[]
  usersJoinToTrip UserJoinToTrip[]
  tripComments    TripComment[]
  isHidden        Boolean          @default(false)
  tripFavoritedBy User[]           @relation("TripFavoritedBy", references: [id])
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  body      String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  createdAt DateTime @default(now()) @map("created_at")
}

model Marker {
  id          Int     @id @default(autoincrement())
  lat         String
  lon         String
  trip        Trip?   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId      Int?
  description String?

  @@unique([lat, lon])
}

model ArticleImage {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  article   Article @relation("ArticleImages", fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  user   User   @relation(references: [id], onDelete: Cascade, fields: [userId])
  userId Int    @unique
}

model Article {
  id               Int              @id @default(autoincrement())
  title            String           @unique
  description      String
  body             String
  primaryImage     String?
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  tagList          Tag[]
  author           User             @relation("ArticleAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId         Int
  favoritedBy      User[]           @relation("ArticleFavoriteBy", references: [id])
  comments         ArticleComment[]
  images           ArticleImage[]   @relation("ArticleImages")
  countries        Countries[]
  isHidden         Boolean          @default(false)
  isUpdatedByAdmin Boolean          @default(false)
}

model UserImage {
  id                 Int        @id @default(autoincrement())
  image              String     @unique
  user               User?      @relation("UserImages", fields: [userId], references: [id], onDelete: Cascade)
  userId             Int?
  userProfileImage   User?      @relation("UserProfileImage", fields: [userProfileImageId], references: [id], onDelete: Cascade)
  userProfileImageId Int?       @unique
  complaint          Complaint? @relation("ComplaintImage", fields: [complaintId], references: [id])
  complaintId        Int?       @unique
}

model UserRatings {
  id        Int   @id @default(autoincrement())
  rating    Float
  profile   User? @relation("MyRatings", fields: [profileId], references: [id])
  profileId Int
  user      User? @relation("ProvidedRatings", fields: [userId], references: [id])
  userId    Int

  @@unique([profileId, userId])
}

model Complaint {
  id        Int         @id @default(autoincrement())
  user      User?       @relation("ComplaintUserEmit", fields: [userId], references: [id])
  userId    Int
  profile   User?       @relation("ComplaintUserReceive", fields: [profileId], references: [id])
  profileId Int
  reason    String
  image    UserImage?   @relation("ComplaintImage")
    createdAt       DateTime  @default(now()) @map("created_at")
}
